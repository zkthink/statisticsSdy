/***
 * 前端实现文件下载功能
 * 
 * ***/ 

/***
 * 情景一：结合后端实现
 * 第一种：下载服务器的静态资源：a、form、iframe、location.href、window.open()
 * a标签
 * HTML5新增download属性，指示浏览器是下载URL而不是导航到它，将其保存为本地文件。如果属性有值，那么此值将在下载保存过程中作为预填充的文件名（此属性仅适用于同源 URL）
 * 
 * 第二种：前端传参，后端生成文件
 * 思路：前端通过发送数据或参数给到后端 --> 在由后端根据接收的数据生成文件或根据参数查找出对应的数据在生成文件 --> 
 * 然后在响应请求头中设置(Content-disposition：attachment；filename="fliename.fileType") --> 浏览器接收到响应头后就会触发下载行为。
 * 
 * 优缺点
 * 优点：可以根据参数生成不同的文件，灵活性高；能实现大数据量或大文件的下载
 * 缺点：如果需要下载的是用户生成的内容（在线作图等）或者内容已经全部返回到客户端，会造成资源和带宽的浪费
 * 
 * 情景二：纯前端实现
 * 纯前端实现并不是一定不需要后端，只是有时候后端的数据已经给到前端，用户下载的文件内容只需要现有的数据，这时候就可以是使用纯前端实现下载文件的功能来减小服务器资源和带宽的浪费。
 * 数据来源：后端返回；用户输入（在线作图、在线表格输入）
 * 思路：将数据生成对应得data:URLs或blob:URLs --> 处理下载（或叫导出）方式
 * 
 * 第一步、将数据生成对应得data:URLs或blob:URL
 * ***/